"""
This module contains the implementation for gathering
metrics from the training data. The metrics are then
displayed using the charts implemented in
scikit_charts.charts.
"""

from enum import StrEnum
from typing import TypeAlias, Callable, Final, Tuple, Union, List

import numpy as np
from pandas import DataFrame

METRIC_DTYPE: Final = np.float64
"""
Datatype which is internally used to store metric values.
"""

PredictFunction: TypeAlias = Callable[[Tuple[float] | List[float]], float]
"""
Interface of a prediction function, which takes one or more 
X values and returns the predicted Y value.
"""


class PredictionException(Exception):
    """
    Raised if an exception occurs while calculating a prediction.
    """


class MetricEnum(StrEnum):
    """
    Enum defining the available columns in the DataFrame generated by
    create_metrics. Should be preferred to access the DataFrame, instead
    of using strings.
    """
    TARGET = "target"
    PREDICTION = "prediction"
    RESIDUAL = "residual"
    RELATIVE_ERROR = "relative_error"

    @staticmethod
    def get_feature_columns(frame: DataFrame) -> [str]:
        """
        Lists the available feature columns (x0,...,xn) in the metric DataFrame.
        :param frame: DataFrame generated by create_metrics
        :return: list of available feature columns
        """
        return [feature for feature in frame.columns if str(feature).startswith("x")]


def create_metrics(
        x: Union[np.ndarray[float], list[list[float]]],
        y: Union[np.ndarray[float], list[float]],
        predict: PredictFunction
) -> DataFrame:
    """
    Calculates the metrics used for visualization and returns them as a DataFrame.

    :param x: 2D-array of feature values, which was used to train the prediction model
    :param y: 1D-array of target values with the same length as x
    :param predict: function reference to the predict-function of the trained model
    :return: created DataFrame containing index, features(x0..xn),
    target, prediction, residual and relative_error
    :raises ValueError: raised if x or y have the wrong shape or are empty
    :raises PredictionException: raised if an exception is raised while calculating the prediction
    """

    # Force copy to ensure datatype is correct
    x = np.array(x, dtype=METRIC_DTYPE, copy=False)
    y = np.array(y, dtype=METRIC_DTYPE, copy=False)

    # validate arguments
    if x.ndim != 2:
        raise ValueError(f"x-array has the wrong shape. Expected (n, n) got {x.shape}!")
    if len(x) == 0:
        raise ValueError("x-array is empty!")
    if y.ndim != 1:
        raise ValueError(f"y-array has the wrong shape. Expected (n) got {y.shape}")
    if len(y) == 0:
        raise ValueError("y-array is empty!")
    if len(y) != len(x):
        raise ValueError(f"Different array length between x and y. x: {len(x)}, y: {len(y)}")

    # generate frame
    metric_frame = DataFrame(dtype=METRIC_DTYPE)
    x_col = x.swapaxes(0, 1)
    for i in range(x.shape[1]):
        metric_frame[f"x{i}"] = x_col[i]

    metric_frame[MetricEnum.TARGET] = y
    metric_frame[MetricEnum.PREDICTION] = \
        _generate_predictions(x, predict)
    metric_frame[MetricEnum.RESIDUAL] = \
        metric_frame[MetricEnum.TARGET] - metric_frame[MetricEnum.PREDICTION]
    metric_frame[MetricEnum.RELATIVE_ERROR] = np.divide(
        metric_frame[MetricEnum.RESIDUAL],
        metric_frame[MetricEnum.TARGET]
    )

    return metric_frame


def _generate_predictions(x: np.ndarray, predict: PredictFunction) -> [float]:
    """
    Generate predict column from the feature array x.

    :param x: 2D-array of feature values, which was used to train the prediction model
    :param predict: function reference to the predict-function of the trained model
    :return: array with length of x containing predictions
    :raises PredictionException: raised if an exception is raised while calculating the prediction
    """
    prediction_col: [float] = []

    features: tuple[float]
    for features in x:
        try:
            prediction_col.append(predict(features))
        except Exception as exc:
            raise PredictionException(
                f"Exception occurred while calculating prediction. x:{features} \n\t{exc}"
            )

    return prediction_col
